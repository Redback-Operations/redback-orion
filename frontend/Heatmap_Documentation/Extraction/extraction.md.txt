# Extraction System Documentation

## Overview
The Extraction project is designed to streamline data logistics in real-time environments, such as monitoring soccer matches. This system leverages MongoDB for efficient storage and retrieval, enabling robust real-time insights for multiple stakeholders, including coaches, analysts, and security personnel.

---

## Key Features

### 1. Development of Data Logistics System
A robust system leveraging MongoDB was developed to manage large volumes of data effectively. It supports:
- **Seamless data retrieval** for downstream tasks.
- **Efficient data insertion** from multiple sources.

#### Code Summary: Data Flow
```mermaid
classDiagram
    class DataCollector {
        - cameraFeed
        - sensorData
    }

    class DataProcessor {
        - computerVisionAlgorithms
        - machineLearningModels
    }

    class DataStorage {
        - cloudStorage
        - localStorage
    }

    class DataAnalyst {
        - statisticalAnalysis
        - visualizationTools
    }

    DataCollector "**provides data to**" --> DataProcessor
    DataProcessor "**processes data and sends to**" --> DataStorage
    DataStorage "**provides data to**" --> DataAnalyst
    DataAnalyst "**generates insights and sends to**" --> DataCollector
```

---

### 2. Smart Query System
This system enables intelligent interaction with a computer vision system for targeted queries based on pre-defined parameters.

#### Code Example: MongoDB Smart Query
```javascript
// Import MongoDB client
const { MongoClient } = require('mongodb');

// MongoDB connection URI
const uri = "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/?retryWrites=true&w=majority";

// Create a MongoDB client
const client = new MongoClient(uri);

async function monitorSoccerSystem() {
  try {
    // Connect to the MongoDB cluster
    await client.connect();

    // Access the database
    const database = client.db("soccer_vision_system");
    
    // Player Tracking Collection
    const playerTracking = database.collection("player_tracking");
    
    // Crowd Monitoring Collection
    const crowdMonitoring = database.collection("crowd_monitoring");

    // Query for live player tracking data for a specific match
    const matchId = "match123"; // Replace with the current match ID
    const livePlayers = await playerTracking.find({
      match_id: matchId,
      timestamp: { $gte: new Date(Date.now() - 10000) } // Last 10 seconds
    }).toArray();
    console.log("Live Players Tracking Data:", livePlayers);

    // Real-time crowd density monitoring
    const crowdedSections = await crowdMonitoring.find({
      density: { $gt: 80 }, // Density > 80% indicates high congestion
      timestamp: { $gte: new Date(Date.now() - 30000) } // Last 30 seconds
    }).toArray();
    console.log("Crowded Sections:", crowdedSections);

    // Raise alerts if crowd density exceeds threshold
    crowdedSections.forEach(section => {
      if (section.alerts && section.alerts.includes("overcrowding")) {
        console.log(`ALERT: Overcrowding detected in section ${section.section}`);
      }
    });

    // Example: Track a specific player in real-time
    const playerId = "player10"; // Replace with the desired player ID
    const playerData = await playerTracking.findOne({
      player_id: playerId,
      match_id: matchId
    });
    console.log("Specific Player Data:", playerData);

  } catch (error) {
    console.error("Error monitoring the system:", error);
  } finally {
    // Close the MongoDB connection
    await client.close();
  }
}

monitorSoccerSystem();
```

---

### 3. High-Level Solution Design
A scalable and efficient architectural framework was created to automate data logistics, ensuring smooth integration with future modules.

#### Architecture Summary
1. **Data Sources**
   - **Soccer Players' Wearables**: GPS trackers and heart rate monitors for real-time player metrics.
   - **Stadium Sensors**: Cameras and sensors for player and crowd monitoring.
   - **Crowd Monitoring Devices**: Devices capturing crowd reactions and movements.

2. **Data Collection Layer**
   - **Edge Devices**: Initial data processing and filtering.
   - **Data Aggregators**: Preparing data for transmission to the central system.

3. **Data Transmission Layer**
   - **Wireless Networks**: Wi-Fi, 5G, etc.
   - **Data Gateways**: Secure data transfer.

4. **Data Processing Layer**
   - **Real-Time Analytics Engine**: Immediate insights, e.g., player tracking and crowd dynamics.
   - **Machine Learning Models**: Predictive analytics, e.g., player fatigue and crowd behaviour.

5. **Data Storage Layer**
   - **Cloud Storage**: Long-term analysis.
   - **Local Databases**: Quick access to recent data.

6. **Data Visualisation Layer**
   - **Dashboards**: Interactive tools for staff.
   - **Mobile Apps**: On-the-go data access.

7. **User Interaction Layer**
   - **Coaches and Analysts**: Strategic decision-making.
   - **Security Personnel**: Crowd safety management.
   - **Fans**: Real-time statistics and engagement.

8. **Feedback Loop**
   - Continuous refinement of algorithms for improved system accuracy.

---

## Use Cases
- Real-time tracking of player movements during matches.
- Detection of unusual crowd behaviour for security interventions.
- Strategic decisions using predictive analytics for player performance and safety.

---

## Summary
The Extraction system ensures efficient data collection, processing, and utilisation. It provides real-time insights into player performance and crowd management, facilitating informed decisions and enhancing game-day experiences for all stakeholders.
