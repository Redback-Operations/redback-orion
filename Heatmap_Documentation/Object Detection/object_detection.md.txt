# Object Detection with YOLO and Heatmap Visualisation

This project uses YOLO (You Only Look Once) for object detection and generates heatmaps to visualise crowd density over time. It is designed for processing video feeds, such as surveillance footage, to monitor and analyse crowd patterns.

---

## Key Features

1. **Object Detection**: Detects people in video frames using the YOLO model.
2. **Heatmap Generation**: Maps detections onto a grid and accumulates density over time.
3. **Visualisation**:
   - Displays a heatmap overlay on video frames in real-time.
   - Plots the final heatmap using Matplotlib for detailed analysis.

---

## Requirements

### Dependencies
Ensure you have the following Python libraries installed:
- `OpenCV`
- `NumPy`
- `Matplotlib`

Install them using pip if needed:
```bash
pip install opencv-python numpy matplotlib
```

### YOLO Model Files
Download the following files and place them in the working directory:
- YOLO weights (`yolov4.weights`)
- YOLO configuration (`yolov4.cfg`)
- COCO labels (`coco.names`)

You can download these files from the [YOLO website](https://pjreddie.com/darknet/yolo/).

---

## Usage Instructions

### Input Video
Replace the sample video file `stadium_crowd.mp4` with your video file. Ensure the path to the video is correctly set in the script:
```python
video_path = 'your_video_file.mp4'
```

### Customisation
1. Adjust the **confidence threshold** in the code to refine detection:
   ```python
   if classes[class_id] == 'person' and confidence > 0.5:
   ```
2. Modify the **heatmap resolution** for finer or coarser results:
   ```python
   heatmap_size = (100, 100)  # Adjust grid size as needed
   ```

### Performance Optimisation
Processing large video files can be resource-intensive. Consider the following:
- Use a GPU-enabled OpenCV build for faster inference.
- Reduce video resolution for quicker processing.

---

## How It Works

1. **Load the YOLO Model**: The script loads pre-trained YOLO weights and configuration.
2. **Frame Processing**: Video frames are processed sequentially to detect objects.
3. **Generate Heatmap**: Detected objects are mapped to a heatmap grid, and density accumulates over time.
4. **Visualisation**: The heatmap is overlaid on video frames in real-time, and a final heatmap is plotted.

---

## Running the Script

Execute the script using Python:
```bash
python object_detection_heatmap.py
```

### Controls
- Press `Q` to exit the real-time heatmap overlay visualisation.

---

## Example Output

### Heatmap Overlay
The heatmap is displayed in real-time over the video, showing crowd density.

### Final Heatmap
A Matplotlib plot of the final heatmap for detailed analysis:
![Heatmap Example](path/to/example_heatmap.png)

---

## Notes

- **Real-Time Applications**: For live monitoring, integrate the script with a camera feed or a streaming API.